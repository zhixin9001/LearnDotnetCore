JWT

c) JWT的场合
最常用于对已经登录用户的认证，比如单点登录，只需在每次请求中都附上JWT，JWT体积小巧且支持跨域。
JWT也可以用于信息传输，因为有根据payload和header计算出的签名的保护，可以确保传递的信息不被篡改。

三、JWT的构成
JWT由Header、Payload、Signature三部分构成，之间用点号风格，构成xx.yy.zz的形式。
a) Header声明了token类型、算法类型（HMAC SHA256或RSA），比如
{
  "alg": "HS256",
  "typ": "JWT"
}
然后对header做Base64URL编码。
b) Payload中保存了声明信息，声明信息有标准声明、公开声明、自定义声明三种类型，前两种声明在相关的标准中已经规定https://www.iana.org/assignments/jwt/jwt.xhtml，推荐但不强制使用，标准声明举例有：

iss: jwt签发者
sub: jwt所面向的用户
aud: 接收jwt的一方
exp: jwt的过期时间，这个过期时间必须要大于签发时间
nbf: 定义在什么时间之前，该jwt都是不可用的.
iat: jwt的签发时间
jti: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击
发送方和接收方也可以自定声明。
{
  "sub": "1234567890",
  "name": "John Doe",
  "admin": true
}
载荷信息也使用Base64URL编码。


c) Signature，签证信息是根据Header、Payload的Base64URL编码以及密钥(Secret)加密生成的，加密算法使用header中定义的类型。

d) Secret信息只保存在服务端，客户端认证后拿到JWT作为token，在后续访问服务端时

https://pan.baidu.com/s/1hsdYF8g#list/path=%2F94%2F1944%EF%BC%9A%E6%9D%BE%E5%B1%B1%E6%88%98%E5%BD%B9%E7%AC%94%E8%AE%B0-%E4%BD%99%E6%88%88&parentPath=%2F94
var payload = new Dictionary<string, object>
      {
        { "UserID",123},
        {"UserName","admin" }
      };

      var secret = "h3h5k9kll789";

      IJwtAlgorithm algorithm = new HMACSHA256Algorithm();
      IJsonSerializer serializer = new JsonNetSerializer();
      IBase64UrlEncoder urlEncoder = new JwtBase64UrlEncoder();
      IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder);
      var token = encoder.Encode(payload, secret);
      Console.WriteLine(token);

      token = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJVc2VySUQiOjEyMywiVXNlck5hbWUiOiJhZG1pbiJ9.7DWb6gdkhqXAYl8all25CFCj1YSJcc93bekNmEmOqoQ";
      try {
        IJsonSerializer serializer1 = new JsonNetSerializer();
        IDateTimeProvider provider1 = new UtcDateTimeProvider();
        IJwtValidator validator1 = new JwtValidator(serializer1, provider1);
        IBase64UrlEncoder urlEncoder1 = new JwtBase64UrlEncoder();
        IJwtDecoder decoder = new JwtDecoder(serializer1, validator1, urlEncoder1);
        var json = decoder.Decode(token, secret, verify: true);
        Console.WriteLine(json);
      }
      catch {

      }

https://pan.baidu.com/s/1eS19Wn4#list/path=%2F
https://pan.baidu.com/share/link?uk=3005976014&shareid=28573063
static void Main(string[] args)
        {
            string reg, str;
            reg = @"\d{3}";
            str = "123";

            reg = @"\d{3}";
            str = "1233";

            reg = @"^\d{3}$";
            str = "1232";

            reg = @"^[0-9]{3}$";
            str = "123";

            //PhoneNum
            reg = @"^1\d{10}$";
            str = "15891655419";

            //IP  \. [.]
            reg = @"^\d{1,3}[.]\d{1,3}\.\d{1,3}\.\d{1,3}$";
            str = "123.190.0.1";

            //chinese 
            reg = @"^[\u4e00-\u9fa5]{2,4}$";
            str = "王母娘娘2";

            //or |大于^ $
            reg = @"^[\u4e00-\u9fa5]{2,4}$|^\d{1,3}$";
            str = "1";

            bool isMatch = Regex.IsMatch(str, reg);
            Console.WriteLine(isMatch);

            //Extract
            //() 改变优先级、提取内容
            reg = @"^(\d{4})\-(\d{1,2})\-(\d{1,2})$";
            str = "2017-8-1";
            Match match = Regex.Match(str, reg);
            if (match.Success)
            {
                //group 0为全部
                var year = match.Groups[1].ToString();
                Console.WriteLine(year);
            }

            Console.ReadKey();
        }


    public static class WebApiConfig
    {
        public static void Register(HttpConfiguration config)
        {
            // Web API configuration and services

            // Web API routes
            config.MapHttpAttributeRoutes();

            config.Routes.MapHttpRoute(
                name: "DefaultApiv1",
                routeTemplate: "api/v1/{controller}/{id}",
                defaults: new { id = RouteParameter.Optional }
            );

            config.Routes.MapHttpRoute(
                name: "DefaultApiv2",
                routeTemplate: "api/v2/{controller}/{id}",
                defaults: new { id = RouteParameter.Optional }
            );

            config.Services.Replace(typeof(IHttpControllerSelector), new VersionControllerSelector(config));
        }
    }
    
        public class VersionControllerSelector : DefaultHttpControllerSelector
    {
        private HttpConfiguration _config;
        public VersionControllerSelector(HttpConfiguration configuration) : base(configuration)
        {
            _config = configuration;
        }
        public override IDictionary<string, HttpControllerDescriptor> GetControllerMapping()
        {
            Dictionary<string, HttpControllerDescriptor> dict = new Dictionary<string, HttpControllerDescriptor>();
            foreach (var asm in _config.Services.GetAssembliesResolver().GetAssemblies())
            {
                //获取所有继承自ApiController的非抽象类
                var controllerTypes = asm.GetTypes().Where(t => !t.IsAbstract && typeof(ApiController).IsAssignableFrom(t)).ToArray();
                foreach (var ctrlType in controllerTypes)
                {
                    //从namespace中提取版本号
                    var match = Regex.Match(ctrlType.Namespace, @"_8._1_WebAPI.Controllers.v(\d+)");
                    if (match.Success)
                    {
                        string verNum = match.Groups[1].Value;
                        string ctrlName = Regex.Match(ctrlType.Name, "(.+)Controller").Groups[1].Value;
                        string key = ctrlName + "v" + verNum;
                        dict[key] = new HttpControllerDescriptor(_config, ctrlName, ctrlType);
                    }
                }
            }
            return dict;
        }

        public override HttpControllerDescriptor SelectController(HttpRequestMessage request)
        {

            var controllers = GetControllerMapping();
            //获取路由数据
            var routeData = request.GetRouteData();
            //从路由中获取当前Controller的名称
            var controllerName = (string)routeData.Values["controller"];
            //从url中获取版本号
            string verNum = Regex.Match(request.RequestUri.PathAndQuery, @"api/v(\d+)").Groups[1].Value;
            //从报文头获取版本号
            //string verNum = request.Headers.GetValues("ApiVersion").Single();
            string key = controllerName + "v" + verNum;
            return controllers.ContainsKey(key) ? controllers[key] : null;
        }
    }
