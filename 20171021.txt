https://pan.baidu.com/s/1eS19Wn4#list/path=%2F
https://pan.baidu.com/share/link?uk=3005976014&shareid=28573063
static void Main(string[] args)
        {
            string reg, str;
            reg = @"\d{3}";
            str = "123";

            reg = @"\d{3}";
            str = "1233";

            reg = @"^\d{3}$";
            str = "1232";

            reg = @"^[0-9]{3}$";
            str = "123";

            //PhoneNum
            reg = @"^1\d{10}$";
            str = "15891655419";

            //IP  \. [.]
            reg = @"^\d{1,3}[.]\d{1,3}\.\d{1,3}\.\d{1,3}$";
            str = "123.190.0.1";

            //chinese 
            reg = @"^[\u4e00-\u9fa5]{2,4}$";
            str = "王母娘娘2";

            //or |大于^ $
            reg = @"^[\u4e00-\u9fa5]{2,4}$|^\d{1,3}$";
            str = "1";

            bool isMatch = Regex.IsMatch(str, reg);
            Console.WriteLine(isMatch);

            //Extract
            //() 改变优先级、提取内容
            reg = @"^(\d{4})\-(\d{1,2})\-(\d{1,2})$";
            str = "2017-8-1";
            Match match = Regex.Match(str, reg);
            if (match.Success)
            {
                //group 0为全部
                var year = match.Groups[1].ToString();
                Console.WriteLine(year);
            }

            Console.ReadKey();
        }


    public static class WebApiConfig
    {
        public static void Register(HttpConfiguration config)
        {
            // Web API configuration and services

            // Web API routes
            config.MapHttpAttributeRoutes();

            config.Routes.MapHttpRoute(
                name: "DefaultApiv1",
                routeTemplate: "api/v1/{controller}/{id}",
                defaults: new { id = RouteParameter.Optional }
            );

            config.Routes.MapHttpRoute(
                name: "DefaultApiv2",
                routeTemplate: "api/v2/{controller}/{id}",
                defaults: new { id = RouteParameter.Optional }
            );

            config.Services.Replace(typeof(IHttpControllerSelector), new VersionControllerSelector(config));
        }
    }
    
        public class VersionControllerSelector : DefaultHttpControllerSelector
    {
        private HttpConfiguration _config;
        public VersionControllerSelector(HttpConfiguration configuration) : base(configuration)
        {
            _config = configuration;
        }
        public override IDictionary<string, HttpControllerDescriptor> GetControllerMapping()
        {
            Dictionary<string, HttpControllerDescriptor> dict = new Dictionary<string, HttpControllerDescriptor>();
            foreach (var asm in _config.Services.GetAssembliesResolver().GetAssemblies())
            {
                //获取所有继承自ApiController的非抽象类
                var controllerTypes = asm.GetTypes().Where(t => !t.IsAbstract && typeof(ApiController).IsAssignableFrom(t)).ToArray();
                foreach (var ctrlType in controllerTypes)
                {
                    //从namespace中提取版本号
                    var match = Regex.Match(ctrlType.Namespace, @"_8._1_WebAPI.Controllers.v(\d+)");
                    if (match.Success)
                    {
                        string verNum = match.Groups[1].Value;
                        string ctrlName = Regex.Match(ctrlType.Name, "(.+)Controller").Groups[1].Value;
                        string key = ctrlName + "v" + verNum;
                        dict[key] = new HttpControllerDescriptor(_config, ctrlName, ctrlType);
                    }
                }
            }
            return dict;
        }

        public override HttpControllerDescriptor SelectController(HttpRequestMessage request)
        {

            var controllers = GetControllerMapping();
            //获取路由数据
            var routeData = request.GetRouteData();
            //从路由中获取当前Controller的名称
            var controllerName = (string)routeData.Values["controller"];
            //从url中获取版本号
            string verNum = Regex.Match(request.RequestUri.PathAndQuery, @"api/v(\d+)").Groups[1].Value;
            //从报文头获取版本号
            //string verNum = request.Headers.GetValues("ApiVersion").Single();
            string key = controllerName + "v" + verNum;
            return controllers.ContainsKey(key) ? controllers[key] : null;
        }
    }
